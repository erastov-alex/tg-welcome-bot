package handler

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"

	"tg-welcome-bot/internal/db"

	tb "gopkg.in/telebot.v3"
)

var BtnConfirmOrder = tb.Btn{Unique: "confirm_order"}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ callback
type productCallback struct {
	ProductID int
}

func StartHandler(c tb.Context) error {
	ctx := context.TODO()
	args := c.Args()
	if len(args) == 0 {
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: /start 123")
	}

	itemID, err := strconv.Atoi(strings.TrimSpace(args[0]))
	if err != nil {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–æ–≤–∞—Ä–∞.")
	}

	product, err := db.GetProduct(ctx, itemID)
	if err != nil {
		log.Printf("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", err)
		return c.Send("üòî –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
	}

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–≤–∞—Ä —Å –∫–Ω–æ–ø–∫–æ–π
	photo := &tb.Photo{
		File: tb.FromURL("https://static.insales-cdn.com/files/1/6197/40482869/original/%D0%B0%D1%82%D0%BB%D0%B5%D1%82%D0%B8%D0%B7%D0%BC%D0%BE_600%D1%85600_78a0fd89473c72c9c5401dd95a8e9acd.png"),
		Caption: fmt.Sprintf(
			"üõçÔ∏è <b>%s</b>\nüëü <i>%s</i>\n\nüíµ –¶–µ–Ω–∞: <b>%d ‚ÇΩ</b>\nüìè –†–∞–∑–º–µ—Ä: US %s / EU %s\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑.",
			product.Name, product.Brand, product.Price, product.SizeUS, product.SizeEU,
		),
	}

	markup := &tb.ReplyMarkup{}
	btn := markup.Data("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", BtnConfirmOrder.Unique, strconv.Itoa(product.ID))
	markup.Inline(markup.Row(btn))

	return c.Send(photo, &tb.SendOptions{
		ParseMode:   tb.ModeHTML,
		ReplyMarkup: markup,
	})
}
